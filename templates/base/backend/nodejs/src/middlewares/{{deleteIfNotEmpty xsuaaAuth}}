import { NextFunction, Request, Response } from 'express';
import passport from 'passport';
import { XsuaaSecurityContext } from '@sap/xssec';

export const verifyCallback = (req: Request, resolve: any, reject: any, requiredRights: string[]) => async (err: Error, user: Express.User, authInfo: XsuaaSecurityContext) => {
    if (err || !authInfo || !user) {
        return reject(JSON.stringify({ code: 401, message: 'Unauthorized' }));
    }
    req.user = user;
    req.authInfo = authInfo;

    if (requiredRights.length > 0) {
        let hasRequiredRights = true;
        for (let i = 0; i < requiredRights.length; i++) {
            if (!authInfo.checkLocalScope(requiredRights[i])) {
                hasRequiredRights = false;
                break;
            }
        }

        if (!hasRequiredRights) return reject(JSON.stringify({ code: 403, message: 'Forbidden' }));
    } else if (!authInfo.checkScope('uaa.user') && !authInfo.checkScope('openid')) return reject(JSON.stringify({ code: 403, message: 'Forbidden' }));

    resolve();
};

export const auth =
    (...requiredRights: string[]) =>
    async (req: Request, res: Response, next: NextFunction): Promise<any> => {
        return new Promise((resolve, reject) => passport.authenticate('JWT', { session: false }, verifyCallback(req, resolve, reject, requiredRights))(req, res, next))
            .then(() => next())
            .catch((err) => next(err));
    };
